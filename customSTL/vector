#ifndef VECTOR_H
#define VECTOR_H

#define SEASTL_VECTOR_SIZE 10
#define SEA_STL_DEBUG 0

namespace std {

template <typename T> class vector {
public:
  typedef T value_type;
  typedef T *iterator;
  typedef value_type *pointer;
  typedef const value_type *const_pointer;
  typedef value_type &reference;
  typedef const value_type &const_reference;
  typedef const_pointer const_iterator;
  typedef size_t size_type;
private:
  static const unsigned buffer_size = SEASTL_VECTOR_SIZE;
  size_type cap;
  size_type count;
  T buf[buffer_size];
  T &non_D();
  const T &non_D_const() const;
public:
  // Big 5
  vector();
  vector(size_type n);
  vector(size_type n, const T &val);
  vector(const vector<T> &v);
  ~vector();

  // Methods
  size_type capacity() const { return cap; }
  size_type size() const { return count; }
  bool empty() const { return count == 0; }
  iterator begin() { return buf; }
  iterator end() { return buf + size(); }
  const_iterator begin() const { return buf; }
  const_iterator end() const { return buf + size(); }
  T &front() { return buf[0]; }
  T &back() { return buf[count-1]; }
  void clear() {
    count = 0;
    cap = 0;
  }

  void push_back(const T &v = T());
  void resize(size_type n);
  void reserve(size_type n);

  T &operator[](size_type index);
};
} // namespace std
#include <vector_impl.tpp>
#endif
